{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.7;\n\nimport \"./PriceConverter.sol\";\n// import \"hardhat/console.sol\";\n\nerror FundMe__NotOwner();\nerror FundMe__TakeFailTheMoney();\nerror FundMe__BelowMinimum();\n\n/**\n * @title 筹款项目\n * @author 油油爵\n * @notice 仅供学习使用\n * @dev 用了喂价合约 若是本地节点 会自动部署喂价合约\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToFundValue;\n    address private s_owner;\n    AggregatorV3Interface private s_priceFeed;\n    uint256 minimumUsd = 8 * 1e18;\n\n    modifier onlyOwner() {\n        if (msg.sender != s_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        s_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    //receive()\n    //fallback()\n    //external()\n\n    function Fund() public payable {\n        // console.log(\"!!!solidity console.log!!!\");\n        if (msg.value.getConversionRate(s_priceFeed) < minimumUsd) {\n            revert FundMe__BelowMinimum();\n        }\n        s_funders.push(msg.sender);\n        s_addressToFundValue[msg.sender] += msg.value.getConversionRate(\n            s_priceFeed\n        );\n    }\n\n    function changeMinimumUsd(uint256 _minimumUsd) public {\n        minimumUsd = _minimumUsd;\n    }\n\n    function removeMoney() public onlyOwner {\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (callSuccess != true) {\n            revert FundMe__TakeFailTheMoney();\n        }\n    }\n\n    function getFunders(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToFundValue(\n        address funder\n    ) public view returns (uint256) {\n        return s_addressToFundValue[funder];\n    }\n\n    function getOwner() public view returns (address) {\n        return s_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getConversionRate(\n        uint256 ethValue,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethValueInUSD = (ethValue * ethPrice) / 1e18;\n        return ethValueInUSD;\n    }\n\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        uint256 addDecimals = 1e18 / (10 ** getDecimals(priceFeed));\n        return uint256(answer) * addDecimals;\n    }\n\n    function getDecimals(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        return priceFeed.decimals();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}